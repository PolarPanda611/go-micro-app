// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_api "github.com/micro/go-api/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = go_api.Response{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Newapi service

type NewapiService interface {
	Call(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type newapiService struct {
	c    client.Client
	name string
}

func NewNewapiService(name string, c client.Client) NewapiService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "newapi"
	}
	return &newapiService{
		c:    c,
		name: name,
	}
}

func (c *newapiService) Call(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Newapi.Call", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Newapi service

type NewapiHandler interface {
	Call(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterNewapiHandler(s server.Server, hdlr NewapiHandler, opts ...server.HandlerOption) error {
	type newapi interface {
		Call(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type Newapi struct {
		newapi
	}
	h := &newapiHandler{hdlr}
	return s.Handle(s.NewHandler(&Newapi{h}, opts...))
}

type newapiHandler struct {
	NewapiHandler
}

func (h *newapiHandler) Call(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.NewapiHandler.Call(ctx, in, out)
}

// Client API for Newapi2 service

type Newapi2Service interface {
	Bar(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type newapi2Service struct {
	c    client.Client
	name string
}

func NewNewapi2Service(name string, c client.Client) Newapi2Service {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "newapi2"
	}
	return &newapi2Service{
		c:    c,
		name: name,
	}
}

func (c *newapi2Service) Bar(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Newapi2.Bar", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Newapi2 service

type Newapi2Handler interface {
	Bar(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterNewapi2Handler(s server.Server, hdlr Newapi2Handler, opts ...server.HandlerOption) error {
	type newapi2 interface {
		Bar(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type Newapi2 struct {
		newapi2
	}
	h := &newapi2Handler{hdlr}
	return s.Handle(s.NewHandler(&Newapi2{h}, opts...))
}

type newapi2Handler struct {
	Newapi2Handler
}

func (h *newapi2Handler) Bar(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.Newapi2Handler.Bar(ctx, in, out)
}
